type CustomField {
    id:Int
    name:String
    type:String
}
type Comment {
    id:Int
    text:String
    date:String
    issue:Issue
    user:UserApp
}
type File {
    name:String
    type:String
    files:[File]
}
type Credential{
    id:Int
    name:String
    roles:[RoleApp]
}

type CrossingState {
    id:Int
    name:String
    description:String
    from:Status
    to:Status
    credential:Credential
}
type GroupeUser {
    id:Int!
    name:String
    members:[MemberGroupe]
}
type MemberGroupe{
    id:Int!
    user:UserApp
    groupe:GroupeUser
    role:String

}
type  Issue {
    id:Int
    summary:String
    description : String
    type:IssueType
    assigne:UserApp
    status:Status
    reporter:UserApp
    directory:String
    issueKey:String
    passeTime:[EntryTime]
    parent:Issue,
    children:[Issue]
    comments:[Comment]
    files:[File]
}
type IssueType{
    id:Int
    displayName:String
    projects:[Project]
    issues:[Issue]
    curentWorkFlow:WorkFlow
}

type Operation{
    id:Int
    date:String
    initial:String
    finale:String
    issue:Issue
    customField:CustomField
    userApp:UserApp
}

type EntryTime {
    id:Int,
    time:Float,
    date:String,
    userApp:UserApp
    issue:Issue
}
type Project{
    id:Int
    name:String
    prefix:String
    issueTypes:[IssueType]
}

type RoleApp{
    id:Int
    name:String
    memberGroupes:[MemberGroupe]
    credentials:[Credential]
}

type Status{
    id:Int
    name:String
    displayName:String
    iconeFile:String
    types:[IssueType]
    fromeStates:[CrossingState]
    acctionPossible:[CrossingState]

}

type UserApp{
    id:String
    username:String
    firstName:String
    lastName:String
    contact:String
    email:String
    adress:String
    cin:String
    groupes:[MemberGroupe]
    operations:[Operation]
    repotrers:[Issue]
    entryTime:[EntryTime]
    photo:String
}

type CustomFieldValue {
    id:Int,
    customField:CustomField
    issue:Issue
    date:String
    string:String
    user:UserApp
    numeric:Float
    text:String
}
type Repertoire{
    path:String
    fileName:String
    type:String
    icone:String
    repertoires:[Repertoire]
}
enum ValueType {
    DATE
    NUMBER
    STRING
    USER
}

type WorkFlow {
    id:Int,
    name:String,
    active :Boolean,
    states :[Status],
    issueTypes :[IssueType],
    crossingStates :[CrossingState],
}



input CustomFieldImput {
    id:Int
    name:String
    type:String
}
input CredentialInput{
    id:Int
    name:String
    roles:[RoleAppInput]
}

input CrossingStateInput{
    id:Int
    name:String
    description:String
    from:Int
    to:Int
    credential:Int
}
input GroupeUserInput {
    id:Int!
    name:String
    mambers:[MemberGroupeInput]
}
input MemberGroupeInput{
    d:Int!
    user:UserAppInput
    groupe:GroupeUserInput
    roles:[RoleAppInput]
}

input  IssueInput {
    id:Int
    summary:String
    issueKey:String
    description : String
    directory:String
    parent:Int,
    type:IssueTypeInput
    assigne:UserAppInput
    status:StatusInput
    reporter:StatusInput
}
input IssueTypeInput{
    id:Int
    displayName:String
    projects:[Int]
    curentWorkFlow:Int
}

input OperationInput{
    id:Int
    date:String
    initial:String
    finale:String
    issue:Int
    costumField:Int
    userApp:Int
}

input PasseTimeInput {
    id:Int,
    time:Float,
    date:String,
    userApp:UserAppInput
    issue:Int
}
input ProjectInput{
    id:Int
    name:String
    prefix:String
    issueTypes:[Int]
}

input RoleAppInput{
    id:Int
    name:String
    memberGroupes:[MemberGroupeInput]
    credentials:[Int]
}

input StatusInput{
    id:Int
    displayName:String
    iconeFile:String
    types:[Int]
    fromeStates:[Int]
    acctionPossible:[Int]

}

input UserAppInput{
    id:String
    username:String
    firstName:String
    lastName:String
    contact:String
    email:String
    adress:String
    cin:String
    photo:String
    groupes:[MemberGroupeInput]
}

input ValueInput {
    id:Int,
    customField:CustomFieldImput
    issue:IssueInput
    date:String
    string:String
    user:UserAppInput
    numeric:Int
    text:String
}
input RepertoireInput {
    path:String
    fileName:String
    type:String
    icone:String
    repertoires:[RepertoireInput]
}

input WorkFlowInput {
    id:Int,
    name:String,
    active :Boolean,
    states :[Int],
    issueTypes :[Int],
    crossingStates :[Int],
}
input CommentInput {
    id:Int
    text:String
    date:String
    issue:IssueInput
    user:UserAppInput
}
